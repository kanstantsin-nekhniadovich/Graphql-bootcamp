type Query {
  data: String!
  users: [User]!
  add(a: Int, b: Int): Int!
  grapes: [Int!]!
  posts(query: String): [Post]!
  comments: [Comment!]!
}

type User {
  id: ID!
  name: String!
  email: String!
  age: Int
  posts: [Post!]!
  comments: [Comment!]!
}

type Post {
  id: ID!
  title: String!
  body: String!
  author: User!
  published: Boolean!
  comments: [Comment!]
}

type Comment {
  id: ID!
  text: String!
  author: User!
  post: Post!
}

type Mutation {
  createUser(user: createUserInput): User!
  updateUser(id: ID!, data: updateUserInput): User!
  deleteUser(id: ID!): User!
  createPost(post: createPostInput): Post!
  updatePost(id: ID!, data: updatePostInput): Post!
  deletePost(id: ID!): Post!
  createComment(comment: createCommentInput): Comment!
  updateComment(id: ID!, text: String!): Comment!
  deleteComment(id: ID!): Comment!
}

type Subscription {
  count: Int!
  comment(postId: ID!): CommentSubscriptionPayload!
  post: PostSubscriptionPayload!
}

input createUserInput {
  name: String!,
  email: String!,
  age: Int,
}

input updateUserInput {
  name: String,
  email: String,
  age: Int,
}

input createPostInput {
  title: String!,
  body: String!,
  published: Boolean!,
  author: ID!
}

input updatePostInput {
  title: String,
  body: String,
  published: Boolean,
}

input createCommentInput {
  text: String!,
  author: ID!,
  post: ID!
}

type PostSubscriptionPayload {
  mutation: MutationType!
  data: Post!
}

type CommentSubscriptionPayload {
  mutation: MutationType!
  data: Comment!
}

enum MutationType {
  CREATED,
  UPDATED,
  DELETED
}
